#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Initialize some default values
  hosts: all
  connection: ssh
  tasks:
    - set_fact:
        private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - set_fact:
        zookeeperServers: "{{ groups['zookeeper'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        serviceUrl: "pulsar://{{ hostvars[groups['pulsar'][0]].private_ip }}:6650/"
        httpUrl: "http://{{ hostvars[groups['pulsar'][0]].private_ip }}:8080/"
    - set_fact:
        pulsar_version: "{{ pulsar_version | default('2.10.2') }}"
        node_exporter_version: "{{ node_exporter_version | default('1.2.2') }}"
        prometheus_version: "{{ prometheus_version | default('2.31.1') }}"
        disk_dev: "{{ disk_dev | default(['/dev/nvme1n1', '/dev/nvme2n1']) }}"
    - set_fact:
        pulsar_binary:
          src: "https://downloads.apache.org/pulsar/pulsar-{{ pulsar_version }}/apache-pulsar-{{ pulsar_version }}-bin.tar.gz"
          remote: yes
      when: pulsar_binary is not defined
    - set_fact:
        node_exporter_binary:
          src: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
          remote: yes
      when: node_exporter_binary is not defined
    - set_fact:
        prometheus_binary:
          src: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
          remote: yes
      when: prometheus_binary is not defined

- name: Format and mount disks for Zookeeper hosts
  hosts: zookeeper
  connection: ssh
  become: true
  tasks:
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
      with_items:
        - "{{ disk_dev[0] }}"
        - "{{ disk_dev[1] }}"
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/zookeeper/logs", src: "{{ disk_dev[0] }}" }
        - { path: "/mnt/zookeeper/data", src: "{{ disk_dev[1] }}" }

- name: Format and mount disks for Pulsar/BookKeeper hosts
  hosts: pulsar
  connection: ssh
  become: true
  tasks:
    - name: Format disks
      filesystem:
         fstype: xfs
         dev: '{{ item }}'
      with_items:
        - "{{ disk_dev[0] }}"
        - "{{ disk_dev[1] }}"
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/journal", src: "{{ disk_dev[0] }}" }
        - { path: "/mnt/storage", src: "{{ disk_dev[1] }}" }

- name: Install Node exporter on Brokers to collect system metrics
  hosts: pulsar
  become: true
  tasks:
    - name: Add user node_exporter
      user:
        name: node_exporter
        shell: /bin/false
        system: true
        create_home: no
    - name: Download and extract
      unarchive:
        src: "{{ node_exporter_binary.src }}"
        dest: /tmp
        remote_src: "{{ node_exporter_binary.remote }}"

    - name: Copy bin node_exporter to /usr/local/bin
      copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        remote_src: yes
        dest: /usr/local/bin/
        owner: node_exporter
        group: node_exporter
        mode: u+x,g+x,o+x

    - name: Create service node_exporter.service
      blockinfile:
        path: /etc/systemd/system/node_exporter.service
        block: |
          [Unit]
          Description=Prometheus Node Exporter
          Wants=network-online.target
          After=network-online.target
          [Service]
          User=node_exporter
          Group=node_exporter
          Type=simple
          ExecStart=/usr/local/bin/node_exporter
          [Install]
          WantedBy=multi-user.target
        create: true

    - name: systemctl daemon_reload
      systemd:
        daemon_reload: yes

    - name: Start and Enable node_exporter
      service:
        name: node_exporter
        state: started
        enabled: yes

    - name: Check whether port 9100 is available
      wait_for:
        port: 9100
        state: started
        timeout: 5

- name: Pulsar installation
  hosts: pulsar:client:zookeeper
  connection: ssh
  become: true
  tasks:
    - name: Set performance profile
      command: tuned-adm profile latency-performance
    - name: Install RPM packages
      yum:
        state: latest
        pkg:
          - wget
          - java-17-openjdk
          - java-17-openjdk-devel
          - sysstat
          - vim
          - chrony
      when: ansible_facts['distribution'] == 'RedHat'
    - file: path=/opt/pulsar state=absent
    - file: path=/opt/pulsar state=directory
    - name: Download Pulsar binary package
      unarchive:
        src: "{{ pulsar_binary.src }}"
        remote_src: "{{ pulsar_binary.remote }}"
        dest: /opt/pulsar
        extra_opts: ["--strip-components=1"]
    - set_fact:
        max_heap_memory: "{{ pulsar_max_heap_memory | default('32g') }}"
        max_direct_memory: "{{ pulsar_max_direct_memory | default('32g') }}"
    - template:
        src: "templates/pulsar_env.sh"
        dest: "/opt/pulsar/conf/pulsar_env.sh"
    - template:
        src: "templates/bkenv.sh"
        dest: "/opt/pulsar/conf/bkenv.sh"
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' > /etc/environment

#- name: Protocol Handlers installation
#  hosts: pulsar
#  connection: ssh
#  become: true
#  tasks:
#    - file: path=/opt/pulsar/protocols state=absent
#    - file: path=/opt/pulsar/protocols state=directory
#    - name: Upload local protocol handlers
#      copy:
#        src: "{{ item.local_path }}"
#        dest: /opt/pulsar/protocols
#      loop: "{{ protocol_handlers }}"
#      when:
#        - protocol_handlers is defined
#        - item.local_path is defined
#    - name: Download protocol handlers
#      get_url:
#        url: "{{ item.url }}"
#        dest: /opt/pulsar/protocols
#      loop: "{{ protocol_handlers }}"
#      when:
#        - protocol_handlers is defined
#        - item.local_path is not defined

- name: ZooKeeper setup
  hosts: zookeeper
  connection: ssh
  become: true
  tasks:
    - set_fact:
        zid: "{{ groups['zookeeper'].index(inventory_hostname) }}"
        max_heap_memory: "{{ zookeeper_max_heap_memory | default('32G') }}"
        max_direct_memory: "{{ zookeeper_max_direct_memory | default('2G') }}"
    - file:
        path: "/opt/pulsar/{{ item }}"
        state: directory
      with_items:
        - data/zookeeper
    - template:
        src: "templates/pulsar_env.sh"
        dest: "/opt/pulsar/conf/pulsar_env.sh"
    - template:
        src: "templates/zoo.cfg"
        dest: "/opt/pulsar/conf/zookeeper.conf"
    - template:
        src: templates/myid
        dest: "/mnt/zookeeper/data/myid"
    - template:
        src: "templates/zookeeper.service"
        dest: "/etc/systemd/system/zookeeper.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "zookeeper"

- name: BookKeeper setup
  hosts: pulsar
  connection: ssh
  become: true
  tasks:
    - command: >
        bin/pulsar initialize-cluster-metadata --cluster local
        --zookeeper {{ hostvars[groups['zookeeper'][0]].private_ip }}:2181
        --configuration-store {{ hostvars[groups['zookeeper'][0]].private_ip }}:2181
        --web-service-url {{ httpUrl }}
        --broker-service-url {{ serviceUrl }}
      args:
        chdir: /opt/pulsar
      when: groups['pulsar'][0] == inventory_hostname
    - set_fact:
        skip_journal: "{{ skip_journal | default(false) }}"
    - name: Apply BookKeeper configuration file [Bypass Journal]
      template:
        src: "templates/bookkeeper-skip-journal.conf"
        dest: "/opt/pulsar/conf/bookkeeper.conf"
      when: skip_journal|bool
    - name: Apply BookKeeper configuration file
      template:
        src: "templates/bookkeeper.conf"
        dest: "/opt/pulsar/conf/bookkeeper.conf"
      when: not skip_journal|bool
    - name: Install bookkeeper systemd service
      template:
        src: "templates/bookkeeper.service"
        dest: "/etc/systemd/system/bookkeeper.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "bookkeeper"

- name: Pulsar configuration and systemd setup
  hosts: pulsar
  connection: ssh
  become: true
  tasks:
    - name: Set up broker
      template:
        src: "templates/broker.conf"
        dest: "/opt/pulsar/conf/broker.conf"
    - template:
        src: "templates/pulsar.service"
        dest: "/etc/systemd/system/pulsar.service"
#    - template:
#        src: "templates/{{ item.conf }}"
#        dest: "/opt/pulsar/conf/{{ item.conf }}"
#      loop: "{{ protocol_handlers }}"
#      when: protocol_handlers is defined
#    - set_fact:
#        protocols: "{{ protocols | default([]) + [ item.protocol ]}}"
#      loop: "{{ protocol_handlers }}"
#      when: protocol_handlers is defined
#    - name: Enable protocol handlers
#      lineinfile:
#        path: /opt/pulsar/conf/broker.conf
#        line: "messagingProtocols={{ protocols | join(',') }}"
#      when: protocols is defined
#    - name: Read configurations of all protocol handlers
#      shell: |
#        grep -v "^#" "{{ '/opt/pulsar/conf/' + item.conf }}"
#      loop: "{{ protocol_handlers }}"
#      when: protocol_handlers is defined
#      register: conf_files
#    - name: Update broker.conf for protocol handlers
#      lineinfile:
#        path: /opt/pulsar/conf/broker.conf
#        line: "{{ item.stdout_lines | join('\n') }}"
#      loop: "{{ conf_files.results }}"
#      when: conf_files is defined
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "pulsar"

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"


- name: Get Maven version
  hosts: localhost
  become: false
  tasks:
     - shell: >
          cat ../../pom.xml | xmllint --format - \
            | sed "s/xmlns=\".*\"//g" | xmllint --stream --pattern /project/version --debug - \
            | grep -A 2 "matches pattern" | grep text | sed "s/.* [0-9] //g"
       register: maven_version
     - set_fact:
         benchmark_version: "{{ maven_version.stdout }}"

- name: Pulsar benchmarking client setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up client config
      template:
        src: "templates/client.conf"
        dest: "/opt/pulsar/conf/client.conf"
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark

    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-pulsar/*.yaml
      register: drivers_list

    - name: Configure service URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  serviceUrl\: '
         line: '  serviceUrl: {{ serviceUrl }}'
      with_items: '{{ drivers_list.stdout_lines }}'
    - name: Configure http URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  httpUrl: '
         line: '  httpUrl: {{ httpUrl }}'
      with_items: '{{ drivers_list.stdout_lines }}'

    - name: Get list of jms driver config files
      raw: ls -1 /opt/benchmark/driver-jms/pulsar*.yaml
      register: jms_drivers_list

    - name: Configure JMS service URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  serviceUrl\: '
         line: '  serviceUrl: {{ serviceUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS service Connection Handler
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'pulsar\:\/\/localhost\:6650'
         replace: '{{ serviceUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS http URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  httpUrl: '
         line: '  httpUrl: {{ httpUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS http Connection Handler
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'http\:\/\/localhost\:8080'
         replace: '{{ httpUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'

    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark-worker
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xms100G -Xmx100G -XX:+UseZGC"'
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xmx4G"'
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: Prometheus installation
  hosts: prometheus
  connection: ssh
  become: true
  tasks:
    - name: Add Extras Repo
      shell: yum-config-manager --enable rhui-REGION-rhel-server-extras
      when:
        - ansible_facts['distribution'] == 'RedHat'
        - ansible_facts['distribution_major_version'] | int <= 7
    - name: Docker repo
      yum_repository:
        name: docker
        description: repo for docker
        baseurl: "https://download.docker.com/linux/centos/{{ ansible_facts['distribution_major_version'] }}/x86_64/stable/"
        gpgcheck: no
      when: ansible_facts['distribution'] == 'RedHat'
    - name: Installing docker
      yum:
        state: latest
        pkg: ['docker-ce']
    - name: Start docker
      service:
        name: docker
        state: started
        enabled: yes
    - file: path=/opt/prometheus state=absent
    - file: path=/opt/prometheus state=directory
    - name: Download Prometheus Binary Package
      unarchive:
        src: "{{ prometheus_binary.src }}"
        remote_src: "{{ prometheus_binary.remote }}"
        dest: /opt/prometheus
        extra_opts: ["--strip-components=1"]

- name: Prometheus setup
  hosts: prometheus
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/pulsar state=absent
    - file: path=/opt/pulsar state=directory
    - file:
        path: "/opt/prometheus/{{ item }}"
        state: directory
      with_items:
        - data
    - template:
        src: "templates/prometheus.service"
        dest: "/etc/systemd/system/prometheus.service"
    - template:
        src: "templates/pulsar-dashboard.service"
        dest: "/etc/systemd/system/pulsar-dashboard.service"
    - template:
        src: "templates/prometheus.yml"
        dest: "/opt/prometheus/prometheus.yml"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "prometheus"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "pulsar-dashboard"

- name: List host addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Zookeeper servers {{ item }}"
      with_items: "{{ groups['zookeeper'] }}"
    - debug:
        msg: "Pulsar/BookKeeper servers {{ item }}"
      with_items: "{{ groups['pulsar'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"
    - debug:
        msg: "Prometheus servers {{ item }}"
      with_items: "{{ groups['prometheus'] }}"
