#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Format and mount disks for RabbitMQ hosts
  hosts: rabbitmq
  connection: ssh
  become: true
  tasks:
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
      with_items:
        - '/dev/nvme1n1'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/data", src: "/dev/nvme1n1" }
    - name: Set permissions
      file:
        path: "/mnt/data"
        state: touch
        mode: "0777"

- name: Install RabbitMQ Cluster
  hosts: rabbitmq
  connection: ssh
  tasks:
  - set_fact:
      erlangVersion: 24.3.4.5
      rabbitMqVersion: 3.10.7
  - name: Install RPM packages
    yum: pkg={{ item }} state=latest
    with_items:
      - wget
      - sysstat
      - vim
      - socat
  - name: Install Erlang
    yum:
      name: https://github.com/rabbitmq/erlang-rpm/releases/download/v{{ erlangVersion }}/erlang-{{ erlangVersion }}-1.el8.x86_64.rpm
      state: present
      disable_gpg_check: yes
  - name: Install Rabbitmq Server
    yum:
      name: https://github.com/rabbitmq/rabbitmq-server/releases/download/v{{ rabbitMqVersion }}/rabbitmq-server-{{ rabbitMqVersion }}-1.el8.noarch.rpm
      state: present
      disable_gpg_check: yes

  - name: Create rabbitmq-env.conf file
    template:
      src: "templates/rabbitmq-env.conf"
      dest: "/etc/rabbitmq/rabbitmq-env.conf"

  - systemd:
      state: started
      daemon_reload: yes
      name: "rabbitmq-server"

  - name: Install web management
    shell: rabbitmq-plugins enable rabbitmq_management
  - systemd:
      state: restarted
      daemon_reload: yes
      name: "rabbitmq-server"

  - name: Clear servers' Erlang cookie
    file:
      path: /var/lib/rabbitmq/.erlang.cookie
      state: absent
  - name: Copy Erlang cookie
    copy: src=erlang.cookie  dest=/var/lib/rabbitmq/.erlang.cookie  owner=rabbitmq group=rabbitmq mode=0400
  - systemd:
      state: restarted
      daemon_reload: yes
      name: "rabbitmq-server"

  - name: RabbitMQ status
    shell: rabbitmqctl cluster_status
    register: result
  - debug:
      msg: '{{ result.stdout }}'

  - name: Rabbit cluster stop slaves
    shell: rabbitmqctl stop_app
    when: inventory_hostname != hostvars[groups['rabbitmq'][0]].inventory_hostname

  - name: Rabbit cluster slaves join master
    shell: rabbitmqctl join_cluster rabbit@{{ hostvars[groups['rabbitmq'][0]].private_ip }}
    when: inventory_hostname != hostvars[groups['rabbitmq'][0]].inventory_hostname

  - name: Start RabbitMQ cluster slaves
    shell: rabbitmqctl start_app
    when: inventory_hostname != hostvars[groups['rabbitmq'][0]].inventory_hostname

  - name: Show RabbitMQ cluster status
    shell: rabbitmqctl cluster_status
    register: result
  - debug:
      msg: '{{ result.stdout }}'

  - name: create admin/admin profile
    shell:  rabbitmqctl add_user admin  admin
    when: inventory_hostname == hostvars[groups['rabbitmq'][0]].inventory_hostname

  - name: set admin tag
    shell: rabbitmqctl set_user_tags admin administrator
    when: inventory_hostname == hostvars[groups['rabbitmq'][0]].inventory_hostname

  - name: set admin permission
    shell: rabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"
    when: inventory_hostname == hostvars[groups['rabbitmq'][0]].inventory_hostname

  - name: Create high availability policy
    shell: rabbitmqctl set_policy ha-all "^" '{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'
    when: inventory_hostname == hostvars[groups['rabbitmq'][0]].inventory_hostname

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"

- name: Rabbitmq benchmarking client setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Install RPM packages
      yum: pkg={{ item }} state=latest
      with_items:
        - wget
        - java-11-openjdk
        - java-11-openjdk-devel
        - sysstat
        - vim
    - name: Copy benchmark code
      unarchive:
        src: ../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: >
        tuned-adm profile latency-performance &&
        mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark

    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"

    - template:
        src: "templates/rabbitmq.yaml"
        dest: "/opt/benchmark/driver-rabbitmq/rabbitmq.yaml"

    - name: Configure benchmark-worker memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark-worker
        regexp: '^JVM_MEM='
        line: 'JVM_MEM="-Xms100G -Xmx100G -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+ParallelRefProcEnabled -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=12 -XX:ConcGCThreads=12 -XX:+DisableExplicitGC -XX:-ResizePLAB"'
    - name: Configure benchmark memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark
        regexp: '^JVM_MEM='
        line: 'JVM_MEM="-Xmx4G"'
    - name: Install benchmark-worker systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: List host addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "RabbitMQ brokers {{ item }}"
      with_items: "{{ groups['rabbitmq'] }}"
    - debug:
        msg: "Benchmark client {{ item }}"
      with_items: "{{ groups['client'] }}"
  
