#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Wait till reachable
  hosts: all
  gather_facts: no # important
  tags: [always]
  tasks:
    - name: Wait for all instances to become reachable
      wait_for_connection:
        connect_timeout: 30
        timeout: 600

- name: Format and mount disks for Kafka hosts
  hosts: kafka
  connection: ssh
  become: true
  tasks:
    - command: >
        tuned-adm profile latency-performance
    - name: Format disks
      filesystem:
         fstype: xfs
         dev: '{{ item }}'
      with_items:
        - '/dev/nvme1n1'
        - '/dev/nvme2n1'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/data-1", src: "/dev/nvme1n1" }
        - { path: "/mnt/data-2", src: "/dev/nvme2n1" }
    - name: Increase hard file descriptor limit
      pam_limits:
        domain: '*'
        limit_type: 'hard'
        limit_item: nofile
        value: 500000
    - name: Increase soft file descriptor limit
      pam_limits:
        domain: '*'
        limit_type: 'soft'
        limit_item: nofile
        value: 500000
    - name: Enable pam_limits.so
      lineinfile:
        path: /etc/pam.d/login
        insertafter: EOF
        line: 'session required pam_limits.so'
    - name: set vm.max_map_count
      sysctl:
        name: vm.max_map_count
        value: '262144'
        state: present
        reload: yes
    - name: Reboot the machine with all defaults
      reboot:

- name: Format and mount disks for Zookeeper hosts
  hosts: zookeeper
  connection: ssh
  become: true
  tasks:
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
      with_items:
        - '/dev/nvme1n1'
        - '/dev/nvme2n1'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/zookeeper/logs", src: "/dev/nvme1n1" }
        - { path: "/mnt/zookeeper/data", src: "/dev/nvme2n1" }

- name: Global setup
  hosts: all
  connection: ssh
  become: true
  tasks:
    - name: Install RPM packages
      yum: pkg={{ item }} state=installed
      with_items:
        - python3
        - python3-pip
        - wget
        - java-17-openjdk
        - sysstat
        - vim
        - chrony
        - nmap
      retries: 3
      delay: 3
    - set_fact:
        zookeeperServers: "{{ groups['zookeeper'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        bootstrapServers: "{{ groups['kafka'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"
        gatewayServers: "{{ groups['gateway'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:6969') | join(',') }}"
        privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        kafkaVersion: "3.6.1"
      tags: [ always, client-code ]
    - debug:
        msg: "zookeeper servers: {{ zookeeperServers }}\nbootstrap servers: {{ bootstrapServers }}\ngateway servers: {{ gatewayServers }}"
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' > /etc/environment

- name: Kafka setup
  hosts: kafka
  connection: ssh
  become: true
  tags: [kafka]
  tasks:
    - file: path=/opt/kafka state=absent
    - file: path=/opt/kafka state=directory
    - name: Download Kafka package
      unarchive:
        src: "http://archive.apache.org/dist/kafka/{{ kafkaVersion }}/kafka_2.13-{{ kafkaVersion }}.tgz"
        remote_src: yes
        dest: /opt/kafka
        extra_opts: ["--strip-components=1"]


- name: Setup ZooKeeper
  hosts: zookeeper
  connection: ssh
  become: true
  tags: [zookeeper]
  tasks:
    - file: path=/opt/kafka state=absent
    - file: path=/opt/kafka state=directory
    - name: Download Kafka package
      unarchive:
        src: "http://archive.apache.org/dist/kafka/{{ kafkaVersion }}/kafka_2.13-{{ kafkaVersion }}.tgz"
        remote_src: yes
        dest: /opt/kafka
        extra_opts: [ "--strip-components=1" ]
    - set_fact:
        zid: "{{ groups['zookeeper'].index(inventory_hostname) }}"
    - template:
        src: "templates/zookeeper.properties"
        dest: "/opt/kafka/config/zookeeper.properties"
    - template:
        src: templates/myid
        dest: "/mnt/zookeeper/data/myid"
    - template:
        src: "templates/zookeeper.service"
        dest: "/etc/systemd/system/zookeeper.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "zookeeper"

- name: Setup Kafka
  hosts: kafka
  connection: ssh
  become: true
  tags: [kafka]
  tasks:
    - set_fact:
        brokerId: "{{ groups['kafka'].index(inventory_hostname) }}"
    - name: Set up broker
      template:
        src: "templates/server.properties"
        dest: "/opt/kafka/config/server.properties"
    - template:
        src: "templates/kafka.service"
        dest: "/etc/systemd/system/kafka.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "kafka"
      tags: [restart-kafka]

- name: Setup Gateway
  hosts: gateway
  connection: ssh
  become: true
  tags: [gateway]
  vars_files:
    - ./tf_ansible_vars_file.yml
  tasks:
    - name: Check mandatory variables imported from Terraform
      assert:
        that:
          - tf_kms_arn is defined
        fail_msg: "tf_* variable usually defined in '../tf_ansible_vars_file.yml' is missing"
    - name: Check mandatory environment variables are set
      assert:
        that:
          - lookup('ansible.builtin.env', 'ENCRYPT_ACCESS_KEY') is defined
          - lookup('ansible.builtin.env', 'ENCRYPT_SECRET_KEY') is defined
          - lookup('ansible.builtin.env', 'REGISTRY_USERNAME') is defined
          - lookup('ansible.builtin.env', 'REGISTRY_PASSWORD') is defined
        fail_msg: "'ENCRYPT_* or REGISTRY_* environment variable are missing"
    - name: "Check if docker-ce file exists"
      stat:
        path: /etc/yum.repos.d/docker-ce.repo
      register: stat_result
    - block:
        - name: "Make sure yum-utils pkg is installed"
          dnf:
            name: yum-utils
            state: latest
        - name: "Install the Docker Community Edition Repository"
          command: >
            yum-config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
          register: ycm
        - name: "Install Docker"
          dnf:
            name: docker-ce
            state: latest
      when: not stat_result.stat.exists
    - name: "Enable and run Docker CE"
      service:
        name: docker
        state: started
        enabled: yes
    - name: "Copy interceptors config"
      template:
        src: "templates/gateway-interceptors.json"
        dest: "/opt/gateway-interceptors.json"
    - name: "Private registry login"
      community.docker.docker_login:
        registry_url: "{{ lookup('ansible.builtin.env', 'REGISTRY_URL', default='harbor.cdkt.dev') }}"
        username:  "{{ lookup('ansible.builtin.env', 'REGISTRY_USERNAME') }}"
        password: "{{ lookup('ansible.builtin.env', 'REGISTRY_PASSWORD') }}"
    - name: "Gateway container"
      community.docker.docker_container:
        name: gateway
        state: started
        image: "{{ lookup('ansible.builtin.env', 'GATEWAY_IMAGE', default='conduktor/conduktor-gateway:3.0.4') }}"
        restart_policy: on-failure
        volumes:
          - "/opt/gateway-interceptors.json:/opt/interceptors.json"
        env:
          LOG4J2_IO_CONDUKTOR_PROXY_SERVICE_LEVEL: "INFO"
          LOG4J2_IO_CONDUKTOR_PROXY_NETWORK_LEVEL: "INFO"
          LOG4J2_IO_NETTY_LEVEL: "INFO"
          KAFKA_BOOTSTRAP_SERVERS: "{{ bootstrapServers }}"
          GATEWAY_ADVERTISED_HOST: "{{ privateIp }}"
          GATEWAY_HTTP_PORT: "8888"
          GATEWAY_PORT_START: "6969"
          GATEWAY_PORT_COUNT: "3"
          ENCRYPT_ACCESS_KEY: "{{ lookup('ansible.builtin.env', 'ENCRYPT_ACCESS_KEY') }}"
          ENCRYPT_SECRET_KEY: "{{ lookup('ansible.builtin.env', 'ENCRYPT_SECRET_KEY') }}"
          GATEWAY_INTERCEPTOR_CONFIG_LOCATION: "/opt/interceptors.json"
          GATEWAY_ADMIN_API_USERS: "[{username: admin, password: conduktor, admin: true}]"
        published_ports:
          - "8888:8888"
          - "6969:6969"
          - "6970:6970"
          - "6971:6971"
        healthcheck:
          test: "curl --fail http://localhost:8888/health"
          interval: 30s
          retries: 3
          timeout: 10s
    - name: "List interceptors"
      ignore_errors: true
      shell: |
        sleep 30 # wait for gateway to start
        curl -u admin:conduktor http://localhost:8888/admin/interceptors/v1/all
      register: shell_result
    - name: "debug"
      ignore_errors: true
      debug:
        msg: "{{ shell_result.stdout }}"

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"

- name: Setup Benchmark client
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Install pygal
      pip:
        name: pygal
        state: present
    - file: path=/opt/benchmark state=absent
      tags: [client-code]
    - name: Copy benchmark code
      unarchive:
        src: ../../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
      tags: [client-code]
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
      tags: [client-code]
    - shell: tuned-adm profile latency-performance

    - name: Get list of kafka driver config files
      raw: ls -1 /opt/benchmark/driver-gateway/kafka-*.yaml
      register: drivers_list
      tags: [client-code]

    - name: Configure Kafka Bootstrap Servers
      lineinfile:
        dest: '{{ item }}'
        regexp: '^  bootstrap.servers='
        line: '  bootstrap.servers={{ bootstrapServers }}'
      with_items: '{{ drivers_list.stdout_lines }}'
      tags: [client-code]

    - name: Get list of gateway driver config files
      raw: ls -1 /opt/benchmark/driver-gateway/gateway-*.yaml
      register: gateway_drivers_list
      tags: [client-code]

    - name: Configure Gateway Bootstrap Servers
      lineinfile:
        dest: '{{ item }}'
        regexp: '^  bootstrap.servers='
        line: '  bootstrap.servers={{ gatewayServers }}'
      with_items: '{{ gateway_drivers_list.stdout_lines }}'
      tags: [ client-code ]

    - name: Get list of jms driver config files
      raw: ls -1 /opt/benchmark/driver-jms/kafka*.yaml
      register: jms_drivers_list

    - name: Configure JMS Bootstrap Servers
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  bootstrap.servers='
         line: '  bootstrap.servers={{ gatewayServers }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'

    - name: Configure JMS Connection Factory
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'localhost\:9092'
         replace: '{{ gatewayServers }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'

    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark-worker
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xms100G -Xmx100G -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+ParallelRefProcEnabled -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=12 -XX:ConcGCThreads=12 -XX:+DisableExplicitGC -XX:-ResizePLAB"'
      tags: [client-code]
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xmx4G"'
      tags: [client-code]
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
      tags: [client-code]
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
      tags: [client-code]
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"
      tags: [client-code]

- name:  Hosts addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Zookeeper servers {{ item }}"
      with_items: "{{ groups['zookeeper'] }}"
    - debug:
        msg: "Kafka brokers {{ item }}"
      with_items: "{{ groups['kafka'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"
